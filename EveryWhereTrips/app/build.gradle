apply plugin: 'com.android.application'
android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.admin.everywheretrips"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "EveryWhereTrips_${defaultConfig.versionName}_${releaseTime()}.apk"
                }
            }
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "EveryWhereTrips_${defaultConfig.versionName}_${releaseTime()}.apk"
                }
            }
        }
    }

    signingConfigs {
        debug {
            storeFile file('EveryWhereTrip.jks')
            storePassword "123456"
            keyAlias "everywhere"
            keyPassword "123456"
        }
        release {
            storeFile file('EveryWhereTrip.jks')
            storePassword "123456"
            keyAlias "everywhere"
            keyPassword "123456"
        }
    }

    productFlavors {
        //渠道的渠道号
        xiaomi {}
        qh360 {}
        baidu {}
        wandoujia {}
    }
    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [CHANNEL_VALUE: name]
    }
    //多维度打包或者叫版本差异化打包,这里用不到,名字自己定义就好
    flavorDimensions "every"

    //需要加这行代码,否则资产目录下面的资源找不到
    sourceSets { main { assets.srcDirs = ['src/assets', 'src/assets/'] } }

}

// 获取当前系统时间
def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:support-v4:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    //1.1.0 （1.0.5及以前版本的老用户升级需谨慎，API改动过大）
    implementation 'com.scwang.smartrefresh:SmartRefreshLayout:1.1.0-alpha-21'
    implementation 'com.scwang.smartrefresh:SmartRefreshHeader:1.1.0-alpha-21'
    //没有使用特殊Header，可以不加这行
    //卡片布局
    implementation 'com.android.support:cardview-v7:28.0.0'


    //Glide 4.x
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.8.0'
    //图片变换的依赖
    implementation 'jp.wasabeef:glide-transformations:3.3.0'


    //butterknife
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'


    implementation 'com.android.support:design:28.0.0'


    //RxJava+Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    // 必要依赖，解析json字符所用
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
    // 必要依赖，和Rxjava结合必须用到，下面会提到
    implementation 'io.reactivex.rxjava2:rxjava:2.1.3'
    // 必要rxjava2依赖
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    // 必要rxandrroid依赖，切线程时需要用到
    implementation 'com.jungly:gridPasswordView:0.3'
    implementation files('libs/umeng-analytics-8.0.2.jar')
    implementation files('libs/umeng-common-2.0.2.jar')
    api 'com.just.agentweb:agentweb:4.0.3-alpha@aar'
    // (必选)
    //Banner
    implementation 'com.youth.banner:banner:1.4.10'
    //沉浸式状态栏
    implementation 'com.jaeger.statusbarutil:library:1.5.1'
    implementation files('libs/zxing-core-3.2.1.jar')
}
